//compound intrest
import java.io.*; 
class Compoundinterest
{ 
    public static void main(String args[]) 
    { 
        double principle = 10000, rate = 10.25, time = 5; 

        double CI = principle *(Math.pow((1 + rate / 100), time)); 
          
        System.out.println("Compound Interest is "+ CI); 
    } 
}

//covert decimal to binary number
import java.io.*;

import java.util.*;

public class Convert

{

    public static void main(String[] args) 

    {

        int n, a;

        String x = "";

        Scanner s = new Scanner(System.in);

        System.out.print("Enter any decimal number : ");

        n = s.nextInt();

        while(n > 0)

        {

            a = n % 2;

            x = a + "" + x;

            n = n / 2;

        }

        System.out.println("Binary number : "+x);

    }

}

//to check whether given number is armstrong number
import java.util.*;

import java.io.*;

class Armstrong{  

  public static void main(String[] args)  {  

    int c=0,a,temp,n;

    Scanner s=new Scanner(System.in);

    System.out.print("Enter a number : ");

    n=s.nextInt();

    temp=n;  

    while(n>0)  

    {  

      a=n%10;  

      n=n/10;  

      c=c+(a*a*a);  

    }  

    if(temp==c)  

      System.out.println("armstrong number");   

    else  

      System.out.println("Not armstrong number");   

   }  

}  

//ArrayIndexOutOfBound Exception
import java.util.Arrays;

import java.util.Scanner;



public class AIOB {

   public static void main(String args[]) {

      int[] a = {897, 56, 78, 90, 12, 123, 75};

      System.out.println("Elements in the array are:: ");

      System.out.println(Arrays.toString(a));

      Scanner sc = new Scanner(System.in);

      System.out.println("Enter the index of the required element : ");

      try {

         int element = sc.nextInt();

         System.out.println("Element in the given index is : "+a[element]);

      } catch(ArrayIndexOutOfBoundsException e) {

         System.out.println("The index you have entered is invalid");

      }

   }

}
//to create deadlock between 2 threads
import java.io.*;

class Thread1 implements Runnable {

     public Object obj1;

     public Object obj2;

     public Thread1(Object obj1, Object obj2) {

           this.obj1 = obj1;

           this.obj2 = obj2;

     }



     public void run() {

           while(true) {

                synchronized (obj1) {

                     System.out.println("Thread1 : obj1");

                     synchronized (obj2) {

                           System.out.println("Thread1 : obj2");

                     }

                }

           }

     }

}



class Thread2 implements Runnable {

     public Object obj1;

     public Object obj2;

     public Thread2(Object obj1, Object obj2) {

           this.obj1 = obj1;

           this.obj2 = obj2;

     }

     public void run() {

           while(true) {

                synchronized (obj2) {

                     System.out.println("Thread2 : obj2");

                     synchronized (obj1) {

                           System.out.println("Thread2 : obj1");

                     }

                }

           }

     }

}



public class DeadLock {

     public static void main(String args[]) throws InterruptedException {

           Object obj1 = new Object();

           Object obj2 = new Object();



           Thread2 runn2 = new Thread2(obj1, obj2);

           Thread1 runn1 = new Thread1(obj1, obj2);



           Thread thrd2 = new Thread(runn2);

           Thread thrd1 = new Thread(runn1);



           thrd1.start();

           thrd2.start();



           while(!thrd2.isAlive() || !thrd1.isAlive()) {

                System.out.println("No deadlock found");

           }



     }

}
